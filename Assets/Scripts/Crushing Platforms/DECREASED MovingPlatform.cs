using UnityEngine;

public class MovingPlatform : MonoBehaviour
{
    [Header("Movimiento")]
    [SerializeField] private float moveSpeed = 20f;
    [SerializeField] private float separationSpeed = 3f;
    [SerializeField] private bool movingForward = true; // Direcci√≥n actual

    private bool isSeparating = false; // Indica si la plataforma est√° separ√°ndose despu√©s del choque
    private Vector3 startPos;
    
    private void Start()
    {
        startPos = transform.position;

        // Asegurar que solo nos suscribimos una vez
        if (PlatformEventManager.Instance != null)
        {
            PlatformEventManager.Instance.OnPlatformReturn -= ChangeDirection; // üîπ Primero nos desuscribimos por si acaso
            PlatformEventManager.Instance.OnPlatformReturn += ChangeDirection; // üîπ Luego nos suscribimos
            // Debug.Log(gameObject.name + " suscrito al evento OnPlatformReturn.");
        }
        else
        {
            Debug.LogError("PlatformEventManager no encontrado en la escena.");
        }
    }

    private void Update()
    {
        MovePlatform();
    }

    void MovePlatform()
    {
        float speed = isSeparating ? separationSpeed : moveSpeed;
        float direction = movingForward ? 1 : -1;

        transform.position += Vector3.forward * direction * speed * Time.deltaTime;

        // Debug.Log(gameObject.name + " movi√©ndose en direcci√≥n: " + (movingForward ? "adelante" : "atr√°s"));
    }

    private void OnTriggerEnter(Collider other)
    {
        if (other.CompareTag("MovingPlatform")) 
        {
            isSeparating = true; // Se separa al chocar con otra plataforma
            movingForward = !movingForward; // üîπ Invertimos la direcci√≥n de inmediato
            moveSpeed = separationSpeed; // üîπ Reducimos la velocidad temporalmente

            // Debug.Log(gameObject.name + " colision√≥ con otra plataforma. Cambiando direcci√≥n y reduciendo velocidad.");
        }
        else if (other.CompareTag("ReturnPlatform"))
        {
            isSeparating = false; // üîπ Ya no estamos separ√°ndonos
            moveSpeed = 20f; // üîπ Restauramos velocidad normal

            // ‚ùå Eliminamos el cambio de direcci√≥n aqu√≠, dejamos que lo haga el evento
            // movingForward = !movingForward; 

            PlatformEventManager.Instance.TriggerPlatformReturn(); // üîπ Disparamos el evento de sincronizaci√≥n

            // Debug.Log(gameObject.name + " toc√≥ ReturnPlatform. Disparando evento.");
        }
    }

    private void ChangeDirection()
    {
        bool previousDirection = movingForward; // Guardamos la direcci√≥n anterior
        movingForward = !movingForward;
        moveSpeed = 20f; // üîπ Restauramos la velocidad normal

        // Debug.Log(gameObject.name + " CAMBIO DE DIRECCI√ìN: de " + (previousDirection ? "adelante" : "atr√°s") + 
        //         " a " + (movingForward ? "adelante" : "atr√°s"));
    }


    private void OnDestroy()
    {
        // Nos aseguramos de quitar la suscripci√≥n cuando el objeto sea destruido
        if (PlatformEventManager.Instance != null)
            PlatformEventManager.Instance.OnPlatformReturn -= ChangeDirection;
    }
}
